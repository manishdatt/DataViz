{
  "hash": "5581b792d9caa0f85c94f3c80e2c2882",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: The xkcd color survey\nmarimo-version: 0.14.9\nauthor: Manish Datt\ndate: 7/8/2025\ndescription: Identification of colors by the participants.\nimage: xkcd_colors.png\ncategories:\n- sklearn\n- colors\n- TidyTuesday\n- PydyTuesday\nslug: '2572'\nfilters:\n- marimo-team/marimo\n---\n\n## TidyTuesday data for [2025-07-08](https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-07-08/readme.md)\n\n::: {#c62619d6 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport colorsys\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import pairwise_distances_argmin_min\nimport textwrap\n```\n:::\n\n\n::: {#e02c7db2 .cell execution_count=2}\n``` {.python .cell-code}\nanswers = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-07-08/answers.csv')\ncolor_ranks = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-07-08/color_ranks.csv')\nusers = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-07-08/users.csv')\n```\n:::\n\n\n::: {#1fe776b4 .cell execution_count=3}\n``` {.python .cell-code}\nanswers\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>hex</th>\n      <th>rank</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>#8240EA</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>#4B31EA</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>#584601</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>#DA239C</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>#B343E5</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1058206</th>\n      <td>152397</td>\n      <td>#7238F0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1058207</th>\n      <td>152398</td>\n      <td>#8E14CD</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1058208</th>\n      <td>152398</td>\n      <td>#0A49E7</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1058209</th>\n      <td>152400</td>\n      <td>#38A30E</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1058210</th>\n      <td>152401</td>\n      <td>#4D004B</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>1058211 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#0265fc80 .cell execution_count=4}\n``` {.python .cell-code}\nanswers['rank'].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\narray([1, 3, 5, 4, 2])\n```\n:::\n:::\n\n\n::: {#1612b443 .cell execution_count=5}\n``` {.python .cell-code}\ncolor_ranks\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>color</th>\n      <th>rank</th>\n      <th>hex</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>purple</td>\n      <td>1</td>\n      <td>#7e1e9c</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>green</td>\n      <td>2</td>\n      <td>#15b01a</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>blue</td>\n      <td>3</td>\n      <td>#0343df</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>pink</td>\n      <td>4</td>\n      <td>#ff81c0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>brown</td>\n      <td>5</td>\n      <td>#653700</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>944</th>\n      <td>fresh green</td>\n      <td>945</td>\n      <td>#69d84f</td>\n    </tr>\n    <tr>\n      <th>945</th>\n      <td>electric lime</td>\n      <td>946</td>\n      <td>#a8ff04</td>\n    </tr>\n    <tr>\n      <th>946</th>\n      <td>dust</td>\n      <td>947</td>\n      <td>#b2996e</td>\n    </tr>\n    <tr>\n      <th>947</th>\n      <td>dark pastel green</td>\n      <td>948</td>\n      <td>#56ae57</td>\n    </tr>\n    <tr>\n      <th>948</th>\n      <td>cloudy blue</td>\n      <td>949</td>\n      <td>#acc2d9</td>\n    </tr>\n  </tbody>\n</table>\n<p>949 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#b84d46e5 .cell execution_count=6}\n``` {.python .cell-code}\ndef hex_to_hsl(hex_color):\n    rgb = colors.to_rgb(hex_color)  # Returns RGB as floats (0-1)\n    h, l, s = colorsys.rgb_to_hls(*rgb)  # Note: HLS order\n#    return round(h * 360, 1), round(s * 100, 1), round(l * 100, 1)\n    return h, s, l\n\nprint(hex_to_hsl(\"#ff5733\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(0.02941176470588236, 1.0, 0.6)\n```\n:::\n:::\n\n\n::: {#a5e8a5b9 .cell execution_count=7}\n``` {.python .cell-code}\n# merge answers and color_rank based on rank column\nmerged_data = pd.merge(answers, color_ranks, on='rank', how='left')\nmerged_data[['h', 's', 'l']] = merged_data['hex_x'].apply(hex_to_hsl).apply(pd.Series)\n```\n:::\n\n\n::: {#86da1990 .cell execution_count=8}\n``` {.python .cell-code}\nmerged_data\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>hex_x</th>\n      <th>rank</th>\n      <th>color</th>\n      <th>hex_y</th>\n      <th>h</th>\n      <th>s</th>\n      <th>l</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>#8240EA</td>\n      <td>1</td>\n      <td>purple</td>\n      <td>#7e1e9c</td>\n      <td>0.731373</td>\n      <td>0.801887</td>\n      <td>0.584314</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>#4B31EA</td>\n      <td>3</td>\n      <td>blue</td>\n      <td>#0343df</td>\n      <td>0.690090</td>\n      <td>0.814978</td>\n      <td>0.554902</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>#584601</td>\n      <td>5</td>\n      <td>brown</td>\n      <td>#653700</td>\n      <td>0.132184</td>\n      <td>0.977528</td>\n      <td>0.174510</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>#DA239C</td>\n      <td>4</td>\n      <td>pink</td>\n      <td>#ff81c0</td>\n      <td>0.889800</td>\n      <td>0.723320</td>\n      <td>0.496078</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>#B343E5</td>\n      <td>1</td>\n      <td>purple</td>\n      <td>#7e1e9c</td>\n      <td>0.781893</td>\n      <td>0.757009</td>\n      <td>0.580392</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1058206</th>\n      <td>152397</td>\n      <td>#7238F0</td>\n      <td>1</td>\n      <td>purple</td>\n      <td>#7e1e9c</td>\n      <td>0.719203</td>\n      <td>0.859813</td>\n      <td>0.580392</td>\n    </tr>\n    <tr>\n      <th>1058207</th>\n      <td>152398</td>\n      <td>#8E14CD</td>\n      <td>1</td>\n      <td>purple</td>\n      <td>#7e1e9c</td>\n      <td>0.776577</td>\n      <td>0.822222</td>\n      <td>0.441176</td>\n    </tr>\n    <tr>\n      <th>1058208</th>\n      <td>152398</td>\n      <td>#0A49E7</td>\n      <td>3</td>\n      <td>blue</td>\n      <td>#0343df</td>\n      <td>0.619155</td>\n      <td>0.917012</td>\n      <td>0.472549</td>\n    </tr>\n    <tr>\n      <th>1058209</th>\n      <td>152400</td>\n      <td>#38A30E</td>\n      <td>2</td>\n      <td>green</td>\n      <td>#15b01a</td>\n      <td>0.286353</td>\n      <td>0.841808</td>\n      <td>0.347059</td>\n    </tr>\n    <tr>\n      <th>1058210</th>\n      <td>152401</td>\n      <td>#4D004B</td>\n      <td>1</td>\n      <td>purple</td>\n      <td>#7e1e9c</td>\n      <td>0.837662</td>\n      <td>1.000000</td>\n      <td>0.150980</td>\n    </tr>\n  </tbody>\n</table>\n<p>1058211 rows × 8 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#6b939e01 .cell execution_count=9}\n``` {.python .cell-code}\nmerged_data.groupby('color').count()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>hex_x</th>\n      <th>rank</th>\n      <th>hex_y</th>\n      <th>h</th>\n      <th>s</th>\n      <th>l</th>\n    </tr>\n    <tr>\n      <th>color</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>blue</th>\n      <td>288015</td>\n      <td>288015</td>\n      <td>288015</td>\n      <td>288015</td>\n      <td>288015</td>\n      <td>288015</td>\n      <td>288015</td>\n    </tr>\n    <tr>\n      <th>brown</th>\n      <td>75812</td>\n      <td>75812</td>\n      <td>75812</td>\n      <td>75812</td>\n      <td>75812</td>\n      <td>75812</td>\n      <td>75812</td>\n    </tr>\n    <tr>\n      <th>green</th>\n      <td>314172</td>\n      <td>314172</td>\n      <td>314172</td>\n      <td>314172</td>\n      <td>314172</td>\n      <td>314172</td>\n      <td>314172</td>\n    </tr>\n    <tr>\n      <th>pink</th>\n      <td>131013</td>\n      <td>131013</td>\n      <td>131013</td>\n      <td>131013</td>\n      <td>131013</td>\n      <td>131013</td>\n      <td>131013</td>\n    </tr>\n    <tr>\n      <th>purple</th>\n      <td>249199</td>\n      <td>249199</td>\n      <td>249199</td>\n      <td>249199</td>\n      <td>249199</td>\n      <td>249199</td>\n      <td>249199</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#391e3c86 .cell execution_count=10}\n``` {.python .cell-code}\nf\"{merged_data.groupby('color')['hex_x'].nunique().loc['blue']:,}\"\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n'275,337'\n```\n:::\n:::\n\n\n::: {#4e3db959 .cell execution_count=11}\n``` {.python .cell-code}\ncluster_results = {}\nfor color, group_df in merged_data.groupby('color'):\n    kmeans = KMeans(n_clusters=100, random_state=2025)\n    kmeans.fit(group_df[['h', 's', 'l']])\n\n    # Store the result: labels and cluster centers\n    cluster_results[color] = {\n        'labels': kmeans.labels_,\n        'centers': kmeans.cluster_centers_,\n        'data': group_df.copy()\n    }\n#    cluster_results[color]['data']['cluster'] = kmeans.labels_\n\n#print(cluster_results[\"blue\"][\"data\"])\n\nfor color in cluster_results:\n    group_data = cluster_results[color]['data']\n    centers = cluster_results[color]['centers']\n    closest_idxs, _ = pairwise_distances_argmin_min(centers, group_data[['h', 's', 'l']].values)\n    closest_points = group_data.iloc[closest_idxs]\n    cluster_results[color]['closest_points'] = closest_points\n```\n:::\n\n\n::: {#d6d19718 .cell execution_count=12}\n``` {.python .cell-code}\nprint(cluster_results['blue']['closest_points'][['h', 's', 'l']].head(10).values)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[0.56581741 0.74407583 0.58627451]\n [0.6374269  0.89528796 0.3745098 ]\n [0.50673401 0.52380952 0.62941176]\n [0.59259259 0.54418605 0.42156863]\n [0.66666667 0.88516746 0.59019608]\n [0.66333333 0.20661157 0.4745098 ]\n [0.68726592 0.78070175 0.44705882]\n [0.57042254 0.63963964 0.21764706]\n [0.59777778 0.78947368 0.81372549]\n [0.53159041 0.76884422 0.39019608]]\n```\n:::\n:::\n\n\n::: {#842c1276 .cell execution_count=13}\n``` {.python .cell-code}\nfrom scipy.optimize import root_scalar\ndef hsl_to_rgb(h, s, l):\n    # colorsys expects H, L, S in [0,1]\n    r, g, b = colorsys.hls_to_rgb(h, l, s)\n    return r, g, b\n    \n# Arc length function of theta\ndef arc_length(theta, b):\n    return (b/2) * (theta * np.sqrt(1 + theta**2) + np.arcsinh(theta))\n\n# Inverse function: find theta given s (arc length)\ndef theta_for_s(s, b):\n    # Use root finding to solve arc_length(theta) - s = 0\n    sol = root_scalar(lambda t: arc_length(t, b) - s, bracket=[0, 100], method='bisect')\n    return sol.root\n\nd = 4  # distance from center to corner\n# Define corner offsets using Cartesian product of [-d, d]\ncorners = np.array(np.meshgrid([-d, d], [-d, d])).T.reshape(-1, 2)\noffsets = np.vstack([[0, 0],corners])\n\nfig, ax = plt.subplots(figsize=(8, 8))\n\nfor ind, color_name in enumerate(cluster_results):\n    cp = cluster_results[color_name]['closest_points'][['h', 's', 'l']].values\n    \n    rgb_colors = [hsl_to_rgb(*hsl) for hsl in cp]\n    \n    b = 0.1  # spiral parameter\n    num_points = len(cp)\n    desired_sep = 0.3  # desired arc length between points\n        \n    # Compute theta values for uniform arc length steps\n    arc_lengths = np.arange(num_points) * desired_sep\n    theta_vals = np.array([theta_for_s(s, b) for s in arc_lengths])\n    \n    # Compute spiral coords\n    r = b * theta_vals\n    x = r * np.cos(theta_vals)\n    y = r * np.sin(theta_vals)\n    \n    #plt.scatter(x, y, color=rgb_colors, s=200, marker=\"|\", linewidths=4)\n    plt.scatter(x+offsets[ind][0], y+offsets[ind][1], color=rgb_colors, s=100) \n    ax.text(offsets[ind][0], offsets[ind][1]-3.25, f\"{color_name}\\n{ merged_data.groupby('color')['hex_x'].nunique().loc[color_name]:,}\", fontsize=14, ha='center', va='center', color=color_ranks[color_ranks['color'] == color_name]['hex'].values[0], fontfamily=\"Consolas\")\n\nax.axis(\"off\")\nplt.ylim(-7, 7)\nplt.xlim(-7, 7)\nlong_title = \"Top 100 of the specified number of color variants selected via K-means clustering for the top five colors in the xkcd color survey.\"\nwrapped_title = \"\\n\".join(textwrap.wrap(long_title, width=60))\n\nplt.title(wrapped_title, fontsize=16, fontfamily=\"Consolas\", loc='left')\nplt.tight_layout()\n#plt.ylabel(\"Random value\")\nplt.savefig(\"xkcd_colors.png\", dpi=300, bbox_inches='tight')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](xkcd_colors_files/figure-html/cell-14-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "xkcd_colors_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}