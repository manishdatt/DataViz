{
  "hash": "6e248d0855fb509cfe024e8416e94eb2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Gas prices in the US\"\nauthor: \"Manish Datt\"\ndate: \"7/1/2025\"\ndescription: \"Timeline of gasoline and diesel prices.\"\nimage: \"gas_prices.png\"\ncategories: [Timeseries,TidyTuesday, PydyTuesday]\nslug: \"2571\"\njupyter: python3\n---\n\n## **TidyTuesday data for [2025-06-17](https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-07-01/readme.md)**\n\n::: {#6f54a1be .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\n```\n:::\n\n\n::: {#106d0b7b .cell execution_count=2}\n``` {.python .cell-code}\nweekly_gas_prices = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-07-01/weekly_gas_prices.csv')\n```\n:::\n\n\n::: {#dcc8f593 .cell execution_count=3}\n``` {.python .cell-code}\nweekly_gas_prices['date'] = pd.to_datetime(weekly_gas_prices['date'])\n```\n:::\n\n\n::: {#b11caaf7 .cell execution_count=4}\n``` {.python .cell-code}\nweekly_gas_prices\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>fuel</th>\n      <th>grade</th>\n      <th>formulation</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1990-08-20</td>\n      <td>gasoline</td>\n      <td>regular</td>\n      <td>all</td>\n      <td>1.191</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1990-08-20</td>\n      <td>gasoline</td>\n      <td>regular</td>\n      <td>conventional</td>\n      <td>1.191</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1990-08-27</td>\n      <td>gasoline</td>\n      <td>regular</td>\n      <td>all</td>\n      <td>1.245</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1990-08-27</td>\n      <td>gasoline</td>\n      <td>regular</td>\n      <td>conventional</td>\n      <td>1.245</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1990-09-03</td>\n      <td>gasoline</td>\n      <td>regular</td>\n      <td>all</td>\n      <td>1.242</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>22355</th>\n      <td>2025-06-23</td>\n      <td>gasoline</td>\n      <td>premium</td>\n      <td>all</td>\n      <td>4.128</td>\n    </tr>\n    <tr>\n      <th>22356</th>\n      <td>2025-06-23</td>\n      <td>gasoline</td>\n      <td>premium</td>\n      <td>conventional</td>\n      <td>3.950</td>\n    </tr>\n    <tr>\n      <th>22357</th>\n      <td>2025-06-23</td>\n      <td>gasoline</td>\n      <td>premium</td>\n      <td>reformulated</td>\n      <td>4.333</td>\n    </tr>\n    <tr>\n      <th>22358</th>\n      <td>2025-06-23</td>\n      <td>diesel</td>\n      <td>all</td>\n      <td>NaN</td>\n      <td>3.775</td>\n    </tr>\n    <tr>\n      <th>22359</th>\n      <td>2025-06-23</td>\n      <td>diesel</td>\n      <td>ultra_low_sulfur</td>\n      <td>NaN</td>\n      <td>3.775</td>\n    </tr>\n  </tbody>\n</table>\n<p>22360 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#c0e8533d .cell execution_count=5}\n``` {.python .cell-code}\nweekly_gas_prices['year'] = weekly_gas_prices['date'].dt.year\n```\n:::\n\n\n::: {#d023ad62 .cell execution_count=6}\n``` {.python .cell-code}\n# create a new col fuel_grade by combining values from fuel and grade columns\nweekly_gas_prices['fuel_grade'] = weekly_gas_prices['fuel'] + '-' + weekly_gas_prices['grade']\nweekly_gas_prices\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>fuel</th>\n      <th>grade</th>\n      <th>formulation</th>\n      <th>price</th>\n      <th>year</th>\n      <th>fuel_grade</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1990-08-20</td>\n      <td>gasoline</td>\n      <td>regular</td>\n      <td>all</td>\n      <td>1.191</td>\n      <td>1990</td>\n      <td>gasoline-regular</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1990-08-20</td>\n      <td>gasoline</td>\n      <td>regular</td>\n      <td>conventional</td>\n      <td>1.191</td>\n      <td>1990</td>\n      <td>gasoline-regular</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1990-08-27</td>\n      <td>gasoline</td>\n      <td>regular</td>\n      <td>all</td>\n      <td>1.245</td>\n      <td>1990</td>\n      <td>gasoline-regular</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1990-08-27</td>\n      <td>gasoline</td>\n      <td>regular</td>\n      <td>conventional</td>\n      <td>1.245</td>\n      <td>1990</td>\n      <td>gasoline-regular</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1990-09-03</td>\n      <td>gasoline</td>\n      <td>regular</td>\n      <td>all</td>\n      <td>1.242</td>\n      <td>1990</td>\n      <td>gasoline-regular</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>22355</th>\n      <td>2025-06-23</td>\n      <td>gasoline</td>\n      <td>premium</td>\n      <td>all</td>\n      <td>4.128</td>\n      <td>2025</td>\n      <td>gasoline-premium</td>\n    </tr>\n    <tr>\n      <th>22356</th>\n      <td>2025-06-23</td>\n      <td>gasoline</td>\n      <td>premium</td>\n      <td>conventional</td>\n      <td>3.950</td>\n      <td>2025</td>\n      <td>gasoline-premium</td>\n    </tr>\n    <tr>\n      <th>22357</th>\n      <td>2025-06-23</td>\n      <td>gasoline</td>\n      <td>premium</td>\n      <td>reformulated</td>\n      <td>4.333</td>\n      <td>2025</td>\n      <td>gasoline-premium</td>\n    </tr>\n    <tr>\n      <th>22358</th>\n      <td>2025-06-23</td>\n      <td>diesel</td>\n      <td>all</td>\n      <td>NaN</td>\n      <td>3.775</td>\n      <td>2025</td>\n      <td>diesel-all</td>\n    </tr>\n    <tr>\n      <th>22359</th>\n      <td>2025-06-23</td>\n      <td>diesel</td>\n      <td>ultra_low_sulfur</td>\n      <td>NaN</td>\n      <td>3.775</td>\n      <td>2025</td>\n      <td>diesel-ultra_low_sulfur</td>\n    </tr>\n  </tbody>\n</table>\n<p>22360 rows × 7 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Plotting\n\n::: {#d5f9f47f .cell execution_count=7}\n``` {.python .cell-code}\nfig, ax = plt.subplots(figsize=(8, 4))\n\nintervals = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]  \ncolors = ['#D6ECF3', '#87CEEB', '#1E90FF', '#0000CD', 'red']\n\ncmap = mcolors.ListedColormap(colors)\nnorm = mcolors.BoundaryNorm(intervals, cmap.N)\n\ndf_max_price = weekly_gas_prices.groupby(['year', 'fuel_grade'])['price'].max().reset_index()\n\nfuel_cat = ['gasoline-all', 'gasoline-premium', 'gasoline-midgrade', 'gasoline-regular', 'diesel-all', 'diesel-ultra_low_sulfur', 'diesel-low_sulfur']\ndf_max_price['fuel_grade'] = pd.Categorical(df_max_price['fuel_grade'], categories=fuel_cat, ordered=True)\n# sort by year and fuel_grade\ndf_max_price = df_max_price.sort_values(by=['fuel_grade'])\n\n# remove rows where fuel_grade contains \"all\"\ndf_max_price = df_max_price[~df_max_price['fuel_grade'].str.contains('all')]\n\ns1 = ax.scatter(\n    df_max_price['year'], \n    df_max_price['fuel_grade'], \n    c=df_max_price['price'], \n    cmap=cmap, \n    norm=norm,\n    marker='s'\n)\n\nax.invert_yaxis()\n\ncbar_ax = inset_axes(ax,\n                     width=\"50%\",  # Width as a percent of the parent axis\n                     height=\"5%\",  # Height as a percent of the parent axis\n                     loc='lower center',  # Position inside the main plot\n                     bbox_to_anchor=(-0.025, 0.15, 0.5, 0.5),\n                     bbox_transform=ax.transAxes)\n\ncbar = plt.colorbar(s1, cax=cbar_ax, shrink=0.5, orientation='horizontal')\ncbar.set_ticklabels([f'${interval:.0f}' for interval in intervals])\ncbar.outline.set_visible(False)\ncbar.set_label('Price per gallon', fontsize=8)\ncbar.ax.xaxis.set_label_position('top')   \ncbar.ax.tick_params(length=0, labelsize=8)  \n\nfor label in ax.get_yticklabels():\n    if \"diesel\" in label.get_text():\n        label.set_color('#666666')\n\nax.set_yticks(ax.get_yticks())\nax.set_yticklabels([k.get_text().split('-')[1] for k in ax.get_yticklabels()])\n\nax.text(0.01, 0.925, '\\n'.join(\"GASOLINE\"), transform=ax.transAxes, fontsize=10,\n        verticalalignment='top', fontfamily='Consolas')\nax.text(0.01, 0.30, '\\n'.join(\"DIESEL\"), transform=ax.transAxes, fontsize=10,\n        verticalalignment='top', color='#666666', fontfamily='Consolas')\nax.spines[['top', 'right']].set_visible(False)\n\n\n\n# Label max and min for each fuel_grade\nfor grade in df_max_price['fuel_grade'].unique():\n    subset = df_max_price[df_max_price['fuel_grade'] == grade]\n\n    # Skip if empty or NaNs\n    if subset.empty or subset['price'].isnull().all():\n        continue\n\n    max_row = subset.loc[subset['price'].idxmax()]\n    min_row = subset.loc[subset['price'].idxmin()]\n\n    arrow = dict(arrowstyle='<-', color='black', linewidth=0.8)\n\n    # Annotate max\n    ax.annotate(\n        f\"${max_row['price']:.2f}\",\n        xy=(max_row['year'], max_row['fuel_grade']),\n        xytext=(0, 13),  \n        textcoords='offset points',\n        ha='center', va='bottom',\n        fontsize=8, color='red',\n        arrowprops=arrow\n    )\n    # Annotate min\n    ax.annotate(\n        f\"${min_row['price']:.2f}\",\n        xy=(min_row['year'], min_row['fuel_grade']),\n        xytext=(0, -20),  \n        textcoords='offset points',\n        ha='center', va='bottom',\n        fontsize=8, color='blue',\n        arrowprops=arrow\n    )\nfig.suptitle('Year-wise maximum fuel prices in the US across five different categories. \\n For each series, the highest and lowest prices are labeled.',x=0, ha='left', fontfamily='Serif')\nplt.savefig('gas_prices.png', dpi=300, bbox_inches='tight')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](gas_prices_files/figure-html/cell-8-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "gas_prices_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}