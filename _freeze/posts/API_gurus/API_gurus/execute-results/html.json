{
  "hash": "07e1a8b2d2c3a09b5e9935aee823badf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Web API dataset\"\nauthor: \"Manish Datt\"\ndate: \"6/17/2025\"\ndescription: \"Background color frequency in the API logos.\"\nimage: \"API_logos.png\"\ncategories: [ggplot2,colors,TidyTuesday]\nslug: \"2563\"\n---\n\n## **TidyTuesday data for [2025-06-17](https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-06-17/readme.md)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggtext)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\napi_categories <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-17/api_categories.csv')\napi_info <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-17/api_info.csv')\napi_logos <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-17/api_logos.csv')\napi_origins <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-17/api_origins.csv')\napisguru_apis <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-17/apisguru_apis.csv')\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(api_logos)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,529\nColumns: 4\n$ name             <chr> \"1forge.com\", \"1password.com:events\", \"1password.loca…\n$ background_color <chr> \"#24292e\", NA, NA, \"#F26641\", NA, NA, NA, NA, NA, NA,…\n$ url              <chr> \"https://api.apis.guru/v2/cache/logo/https_1forge.com…\n$ alt_text         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnormalize_to_hex <- function(color_str) {\n  if (is.na(color_str)) return(NA_character_)\n  \n  color_str <- trimws(tolower(color_str))  # Normalize spacing and case\n  \n  if (grepl(\"^rgb\\\\(\", color_str)) {\n    nums <- as.numeric(unlist(regmatches(color_str, gregexpr(\"\\\\d+\", color_str))))\n    if (length(nums) < 3) return(NA_character_)\n    return(rgb(nums[1], nums[2], nums[3], maxColorValue = 255))\n  }\n  \n  # If it's already hex return it as-is\n  if (grepl(\"^#[0-9a-f]{6}$\", color_str)) {\n    return(toupper(color_str))  \n  }\n  \n  # Handle named colors or invalid inputs\n  tryCatch({\n    return(rgb(col2rgb(color_str)[, 1], maxColorValue = 255))\n  }, error = function(e) {\n    return(NA_character_)\n  })\n}\n\napi_logos <- api_logos %>% \n  mutate(hex_color = map_chr(background_color, normalize_to_hex))\n```\n:::\n\n\nFunction for arranging colors by brightness.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhex_brightness <- function(hex) {\n  rgb <- col2rgb(hex)\n  # Use relative luminance formula\n  0.299 * rgb[1, ] + 0.587 * rgb[2, ] + 0.114 * rgb[3, ]\n}\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\napi_logos_mod <- api_logos %>%\n  filter(!is.na(hex_color)) %>%\n  select(name, hex_color) %>%\n  group_by(hex_color) %>%\n  summarize(n = n()) %>% \n  arrange(hex_color) %>% \n  filter(!grepl(\"transparent\", hex_color, ignore.case=T)) %>% \n  mutate(brightness = hex_brightness(hex_color),\n         text_color = ifelse(brightness > 128, \"black\", \"white\")) %>%\n  arrange(desc(brightness))\n```\n:::\n\n\n## Plotting\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle <- \"<span style='color:white;'>White</span> is the preferred background <br>color in the API logos. Only one <br>logo has a transparent background.\"\n\napi_logos_mod %>% \nggplot(aes(y = factor(seq_len(nrow(api_logos_mod))),x=1, fill = hex_color)) +\n  geom_tile(aes(width=log(n+1))) +\n  geom_text(aes(label = hex_color, color = text_color), size = 3, family=\"Consolas\") +\n  geom_text(aes(label = n, color = text_color), size = 3, nudge_x = 0.5, family=\"Consolas\") +\n  scale_fill_identity() +\n  scale_color_identity() +\n  theme_void() +\n#  labs(title = \"Background color for the API logos\") +\n  geom_richtext(x = -2.15, y = 20, label = title, size = 4, family=\"Serif\", hjust=0, fill=NA, label.color=NA) +\n  theme(axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.grid = element_blank(),\n        panel.background = element_rect(fill = \"darkgrey\"))\n```\n\n::: {.cell-output-display}\n![](API_gurus_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#ggsave(\"API_logos.png\", dpi=300)\n```\n:::\n\n",
    "supporting": [
      "API_gurus_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}